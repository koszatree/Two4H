kamil.zielinski@kul.pl

Entity:
    @NoArgsConstructor
    @AllArgsConstructor
    @Entity
    @Table(name = "table_name") - which table will be connected with this class
    @Column(name = "column_name")
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTIFY) - for ID

Schema:
    Controller - creating API and method for service (@RestController)
    Service - dedicated for data management (@Service)

Dependency injection!
    @Autowired
    By setter
    By constructor

@RequestParam - wants parameters outside application (for DB parameter)

Repository:
    JpaRepository
    @Query


@PostMapping - for saving data

ResponseEntity


FRONTEND:
    html - creting views
    typescript - data operating
    css
    (angular + spring boot crud example) - check this in google
    (javaguides.net) - search for spring boot + angular tutorial
    create interface to connect frontend with backend endpoint

app directory - contains components

app.component.spec.ts - for tests
app.component.ts:
    selector - ...
    {{name_of_property}} - to put some property on frontend

ng g c component_name - creates component directory
ng generate  service service_name - creates service directory

app.config.ts > change appConfig to this:
    export const appConfig: ApplicationConfig = {
        providers: [provideRouter(routes),
        provideHttpClient()] };


@CrossOrigin(origins = "http://path") - to connect backend with frontend (in controller)


constructor(private http: HttpClient){
    this.testUrl = 'http://path'
}

Frontend loop:
    <tr *ngFor="let test of tests">
        <td>{{test.id}}</td>
    </tr>
